
1.
Write a query to fetch the names of employees and their department name.

select e.first_name,d.department_name from employees e
join departments d on e.department_id=d.department_id;


2.Find the total hours logged by each employee across all projects.


select e.employee_id,sum(ep.hours_logged) as total_hours,concat(e.first_name,' ',e.last_name) as name from employees e
join employee_projects ep on e.employee_id=ep.employee_id
group by e.employee_id,e.first_name,e.last_name;



3) Retrieve the department name and count of employees in each department.

select d.department_id ,d.department_name,count(e.employee_id) as count from departments d
left join employees e on d.department_id=e.department_id 
group by d.department_id,d.department_name




4)Identify employees who work on more than 2 projects.

select concat(e.first_name,' ',e.last_name) as emp_name,count(ep.project_id) as project_count
from employees e join employee_projects ep on e.employee_id=ep.employee_id
group by e.first_name,e.last_name having count(ep.project_id)>2


5. Write a query to find employees who do not work on any project.

select concat(e.first_name,' ',e.last_name) as emp_name,ep.project_id,e.employee_id
from employees e left join employee_projects ep on e.employee_id=ep.employee_id
where ep.project_id is null


6. Find employees earning a salary greater than the average salary of their department.

select e.employee_id, concat(e.first_name, ' ', e.last_name) as name
from employees e
where e.salary > (select avg(e1.salary) from employees e1 where e1.department_id = e.department_id);


7.Write a query using a self join to display employee names along with their manager's name. (not able to write the query using self join)


SELECT 
    e.employee_id,
    CONCAT(e.first_name, ' ', e.last_name) AS employee_name,
    CONCAT(m.first_name, ' ', m.last_name) AS manager_name
FROM 
    Employees e
JOIN 
    Departments d ON e.department_id = d.department_id
LEFT JOIN 
    Employees m ON d.manager_id = m.employee_id;
	
8)Identify projects where the total hours logged by all employees exceed 500

-- Identify projects where the total hours logged by all employees exceed 500

select p.project_name ,sum(ep.hours_logged) as total_hours from projects p
join employee_projects ep on p.project_id=ep.project_id group by p.project_name 
having sum(ep.hours_logged)>500



 9)Retrieve the name of the department where the manager has the highest salary.


select d.department_name from departments d
join employees e ON d.manager_id = e.employee_id
order by e.salary desc limit 1;


10)Display employees who have logged more than 40 hours on any project using a CASE statement to classify them as 'Overtime' or 'Normal.'



select e.first_name,
case 
when ep.hours_logged>40 then 'overtime'
when ep.hours_logged<40 then 'normal'
else 'no project'
end as logged_hours
from employees e left join employee_projects ep
on e.employee_id=ep.employee_id



11) Find employees who were hired after January 1, 2020, 
-- and have not been allocated to any projects.

SELECT 
    e.first_name, 
    e.hire_date, 
    ep.project_id 
FROM 
    employees e
LEFT JOIN 
    employee_projects ep ON e.employee_id = ep.employee_id
WHERE 
    e.hire_date > '2020-01-01' 
    AND ep.project_id IS NULL;
	
	
	
12) Write a query to display employees whose total 
--  salary transactions (including bonuses/deductions) exceed 10,000.

select e.first_name,e.last_name ,sum(t.amount)from employees e 
join transactions t on  e.employee_id=t.employee_id where t.transaction_type in('bonus','deductions','salary')
group by e.first_name,e.last_name having sum(t.amount)>10000


14. List employees whose salary is the highest in their respective department.

select e.employee_id,e.first_name from employees e
join (select department_id,max(salary) from employees group by department_id) e_max
on e.department_id=e_max.department_id 


15.-- Display the average hours logged by employees for each project

select e.employee_id,e.first_name,p.project_id, avg(ep.hours_logged) from employees e
 join employee_projects ep on e.employee_id=ep.employee_id 
 join projects p on ep.project_id=p.project_id
group by e.employee_id,e.first_name,p.project_id


16)Write a query to fetch all employees who belong to the same department as "John Doe" using self joins.


select e.employee_id,e.first_name from employees e
join employees e1 on e.department_id=e1.department_id
where e1.first_name='john'
and e1.last_name='doe'


19)List employees whose names start with the letter 'A' and have logged more than 20 hours on any project.

Select concat(e.first_name, ' ', e.last_name) as name from employees e left join employee_projects ep on e.employee_id = ep.employee_id
where e.first_name like 'A%' and ep.hours_logged > 20 ;






	




	
	
	
	
	



