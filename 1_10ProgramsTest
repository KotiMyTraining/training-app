

public class CustomAtoiFunction {

	public static void main(String[] args) {
       String input="+124";
       String input1="-123";
       String input2="1a23";
       
           int result= createCustomAtoiFunction(input2);
           
           System.out.println(" the result is "+ result);
    		   
	}

	private static int createCustomAtoiFunction(String input) {
		// TODO Auto-generated method stub
		
		char[] charArray=input.toCharArray();
		int index=0;
		int sign=1;
		 int result=0;
		
		if(charArray[0]=='+')
		{
			index++;
			 result=convertInputToIneger(charArray,index);
			 return result*sign;
		}
		
		else if(charArray[0]=='-')
		{
			sign=-1;
			index++;
			 result=convertInputToIneger(charArray,index);
			 return result*sign;
		}else
		{
		
		  result=convertInputToIneger(charArray,index);
		  return result*sign;
				 
		}			 
		
		
	}

	private static int convertInputToIneger(char[] charArray, int index) {
		// TODO Auto-generated method stub
		
		int result=0;
		
		while(index<charArray.length)
		{
			if(Character.isDigit(charArray[index]))
			{
				int charValue=charArray[index]-'0';
				result=result*10+charValue;
				index++;
			}else
			{
				return -1;
			}
		}
		
		return result;
	}

}

===========================================================================================================

import java.util.HashMap;

public class DistanceBetweenTwoWords {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
String input="the quick the brown quick brown the frog";
		
		String searchString1="quick";
		String searchString2="frog";
		
	int result=findMinDistaceBetweenWords(input,searchString1,searchString2);
	System.out.println("result " + result);
		

	}

	private static int findMinDistaceBetweenWords(String input, String searchString1, String searchString2) {
		// TODO Auto-generated method stub
		
		HashMap<String,Integer> indexMap=new HashMap<String,Integer>();
		int minDistance=Integer.MAX_VALUE;
		
		String[] words=input.split(" ");
		
		for(int i=0;i<words.length;i++) {
			
			if(words[i].equals(searchString1) || words[i].equals(searchString2))
			{
				indexMap.put(words[i], i);
			}
			
			if(indexMap.containsKey(searchString1)&&indexMap.containsKey(searchString2))
			{
				int distance=Math.abs(indexMap.get(searchString2)-indexMap.get(searchString1))-1;
				
				if(distance<minDistance)
				{
					minDistance=distance;
				}
			}
			
		}

	

		
		return minDistance;
	}

}
==============================================================================================================


public class FinalCoordinates {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String input="UUU";
		String input1="URRDDL";
		String input2="DOWN UP 2xRIGHT DOWN 3xLEFT";
		int x=0;
		int y=0;
		
		String result=findFinalCoordinates(input2,x,y);
		System.out.println(result);

	}

	private static String findFinalCoordinates(String input, int x, int y) {
		// TODO Auto-generated method stub
		
		StringBuilder directionBuilder=new StringBuilder();
		 if(input.contains("x"))
		 {
			 
			String[] directions=input.split(" ");
			
			for(String direction:directions)
			{
				if(direction.contains("x"))
				{
					
					String[] partitions=direction.split("x");
					int count=Integer.parseInt(partitions[0]);
					String move=partitions[1];
					
					for(int i=0;i<count;i++)
					{
						String symbol=getSymbolDirection(move);
						directionBuilder.append(symbol);
					}
					
				}else
				{
					
					String symbol=getSymbolDirection(direction);
					directionBuilder.append(symbol);
				}
					
					
			}
			  return calculateDirection(directionBuilder.toString(), x, y);
		 }else
		 {
		 return calculateDirection(input, x, y);
		 }
		
		
	}
	
	
	
	public  static String calculateDirection(String input, int x, int y)
	{
		
		String[] directions=input.split("");
		
		for(String direction:directions)
		{
		switch(direction)
		{
		case "U": y+=1;
		 break;
		case "D": y-=1;
		break;
		case "L": x-=1;
		break;
		case "R": x+=1;
		break;
		}
		}
		
		return "("+x+" ,"+y+")";
	}
	
	private static String getSymbolDirection(String direction) {
		// TODO Auto-generated method stub
		
		switch(direction)
		{
		case "UP":return "U"; 
		case "DOWN":return "D";
		case "LEFT":return "L";
		case "RIGHT":return "R";
		default:  throw  new IllegalArgumentException("invalid move");
		
		}
	}

}
=======================================================================================================

import java.util.LinkedHashMap;

import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

public class FirstNonRepeatingCharacter {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String input="12345";
		
		String input1="jjkkssser";	
		
		Optional<Entry<Character, Long>> resultMap=findFirstNonRepeatingCharacter(input1);
		
		if(resultMap.isPresent())
		{
			System.out.println("the result is "+ resultMap.get().getKey());
		}else {
			System.out.println("all characters are repeated");
		}

	}

	private static Optional<Entry<Character, Long>> findFirstNonRepeatingCharacter(String input) {
		
		if(input==null && input.isEmpty())
		{
			return null;
		}
		
	    Optional<Entry<Character,Long>> resultMap=input.chars().mapToObj(c->(char)c)
				                      .collect(Collectors.groupingBy
				                   (Function.identity(),LinkedHashMap::new,Collectors.counting()))
				                     .entrySet().stream().filter(entry->entry.getValue()==1).findFirst();
				                      
		
		
		
		
		return resultMap;
		
		
	}

}

=======================================================================================================================
public class LongestWordInDictionary {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String[] input=  {"CODGE", "ODG", "LODGES", "SODG", "dodge", "mODJ", "LODGESSSS"};
		String searchString="ODG";
		
		String result=findLongestWordInDictionary(input,searchString);
		
		if(result!=null && !result.isEmpty())
		{
			System.out.println("the result is "+result);
		}else
		{
			System.out.println("invalid input");
		}

	}

	private static String findLongestWordInDictionary(String[] input, String searchString) {
		// TODO Auto-generated method stub
		
		String maxLengthString="";
		int maxLength=0;
		
		if(input==null)
		{
			return null;
		}
		
		for(String s:input)
		{
			if(s.toLowerCase().contains(searchString.toLowerCase()))
			{
				if(maxLength<s.length())
				{
					maxLength=s.length();
					maxLengthString=s;
				}
			}
		}
		
		return maxLengthString;
		
	}

}
===========================================================================================================

public class MedianSortedArrays {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] nums1= {1,3,5,8};
		int[] nums2= {10,12,14,16,18,20};
		
		int[] nums3= {1,3,7,8,9,20};
		int[] nums4= {15,18,19,21,25,35,45};
		
		double result=findMedianOfSortedArrays(nums3,nums4);
		System.out.println(result);


	}

	private static double findMedianOfSortedArrays(int[] nums1, int[] nums2) {
		// TODO Auto-generated method stub
		
		if(nums1.length>nums2.length)
		{
			findMedianOfSortedArrays(nums2, nums1);
		}
		
		int low=0;
		int m=nums1.length;
		int n=nums2.length;
		int high=m;
		
		while(low<=high)
		{
		
			int partition1=(low+high)/2;
			int partition2=(m+n+1)/2-partition1;
			
			
			int maxLeft1=(partition1==0)?Integer.MIN_VALUE:nums1[partition1-1];
			int minRight1=(partition1==m)?Integer.MAX_VALUE:nums1[partition1];
			
			int maxLeft2=(partition2==0)?Integer.MIN_VALUE:nums2[partition2-1];
			int minRight2=(partition2==n)?Integer.MAX_VALUE:nums2[partition2];
			
			
			if(maxLeft1<=minRight2 && maxLeft2<=minRight1)
			{
				if((m+n)%2==0)
				{
					return (double)	((Math.max(maxLeft1,maxLeft2)+Math.min(minRight1,minRight2))/2);
				}else
					
					return (double) Math.max(maxLeft1,maxLeft2);
					
					
			
		}else if(maxLeft1>minRight2)
		{
			high=partition1-1;
		}else
		{
			low=partition1+1;
		}
		
		
	}
		return 0;
}
}

=================================================================================================================

import java.util.LinkedHashMap;


import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class StringIntoFrequency {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		String input="aabbb";
		String input1="aaaa";
		String input2="a";
		
		Map<Character, Long> result=convertStringIntoFrequency(input);
		
		if(result!=null)
		{
			result.forEach((key,value)->System.out.print(key+""+value));
			
			
			
			/*
			 * System.out.println("printing the map another way");
			 * 
			 * result.entrySet().forEach(entry->System.out.print(entry.getKey()+""+entry.
			 * getValue()));
			 */
		}

	}

	private static Map<Character, Long> convertStringIntoFrequency(String input) {
		// TODO Auto-generated method stub
		
		if(input==null && input.isEmpty())
		{
			return null;
		}
		
		Map<Character,Long> resultMap=input.chars().mapToObj(c->(char)c)
				                      .collect(Collectors.groupingBy
				                    		  (Function.identity(),LinkedHashMap::new,Collectors.counting()));
		
		
		
		
		return resultMap;
	}

}
=========================================================================================================



import java.util.ArrayList;

import java.util.Arrays;
import java.util.List;

public class PrefixSearch {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
      String[] input= {"apple","applet","bread","aper"};
      String prefix="app";
		
		List<String> resultList=findWordsStartingWithPrefix(input,prefix);
		
		System.out.println(resultList);

	}

	private static List<String> findWordsStartingWithPrefix(String[] input,String prefix) {
		// TODO Auto-generated method stub
		
		List<String> resultList=new ArrayList<>();
		for(String word:input)
		{
			if(word.startsWith(prefix))
			{
				resultList.add(word);
			}
		}
		return resultList;
	}

}
 ======================================================================================================================
 
 
 public class Tree {
	
	int data;
	Tree left,Right;
	public Tree(int data) {
		this.data=data;
		this.left=null;
		this.Right=null;
	}
	
	}
	
	
	import java.util.ArrayList;

import java.util.LinkedList;
import java.util.Queue;

public class BinaryTreeTraversingProb3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Tree root=new Tree(2);
		root.left=new Tree(3);
		root.Right=new Tree(4);
		root.left.left=new Tree(5);
		root.left.Right=new Tree(6);
		root.Right.left=new Tree(7);
		
		//inOrderTraversal(root);
		//preorderTraversal(root);
		//postorderTraversal(root);
		
		

	}
	
	
	private static void postorderTraversal(Tree root) {
		// TODO Auto-generated method stub
		
		//preorder root,left,right traversal 
				if(root==null)
				{
				   return;
				}else {
					inOrderTraversal(root.left);
					
					inOrderTraversal(root.Right);
					System.out.print(root.data);

				}
		
	}


	private static void preorderTraversal(Tree root) {
		// TODO Auto-generated method stub
		
		//preorder root,left,right traversal 
				if(root==null)
				{
				   return;
				}else {
					System.out.print(root.data);
					inOrderTraversal(root.left);
					
					inOrderTraversal(root.Right);
				}
		
	}

	private static void inOrderTraversal(Tree root) {
		// TODO Auto-generated method stub
		//inorder traversal left,root ,right
		if(root==null)
		{
		   return;
		}else {
			inOrderTraversal(root.left);
			System.out.print(root.data);
			inOrderTraversal(root.Right);
		}
		
	}

}



